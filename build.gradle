// 构建Gradle脚本自身需要的资源，可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
buildscript {
    ext {
        springboot = '2.6.1'
        springcloud = '2021.0.1'
        h2 = '1.4.200'
        aspectjweaver = '1.9.7'

        hibernate = '5.6.1.Final'
        hibernateValidator = '7.0.2.Final'

        assertj = '3.21'
        junitJupiter = '5.8.1'
        junitPlatform = '1.8.1'
        junit4 = '4.13.2'
        hamcrest = '2.2'
        hamcrestAll = '1.3'
        mockito = '4.0.0'
        jmh = '1.33'

        commonsCollections4 = '4.4'
        commonsIo = '2.11.0'
        commonsLang = '2.6'
        commonsLang3 = '3.12.0'
        commonsCli = '1.4'
        commonsFileupload = '1.4'

        httpcore = '4.4.14'
        httpclient = '4.5.13'

    }

    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springboot}")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "jacoco"
    id "org.sonarqube" version "3.4.0.2513"
}

description 'Spring框架系列'

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "tu-yucheng_java-development-practice"
        property "sonar.organization", "tuyucheng"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

// 全局配置，作用于所有子模块
allprojects {
    group project_group
    version project_version

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://repo.spring.io/milestone' }
        mavenCentral()
    }
}

apply from: 'dependencies.gradle'
def env = System.getProperty("dev") ?: 'dev'

// 配置所有子项目
subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library' // api
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    // 公共依赖
    dependencies {
        implementation 'io.rest-assured:rest-assured'
        implementation 'org.slf4j:slf4j-api'
        implementation 'ch.qos.logback:logback-classic'
        implementation 'ch.qos.logback:logback-core'
        implementation 'org.slf4j:jcl-over-slf4j'
        implementation 'com.google.guava:guava'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testImplementation 'org.junit.vintage:junit-vintage-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'org.hamcrest:hamcrest'
        testImplementation 'org.hamcrest:hamcrest-all'
        implementation 'org.jetbrains:annotations'
        implementation 'org.projectlombok:lombok'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.apache.maven.surefire:surefire-logger-api'

        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }

    dependencyManagement {
        dependencies {
            for (depJar in rootProject.ext.dependencies) {
                dependency depJar.value
            }
        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springboot}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springcloud}"
        }
    }

    sourceSets {
        main {
            java { srcDirs = ['src/main/java'] }
            resources { srcDirs = ['src/main/resources', "src/main/profiles/$env"] }
        }
        test {
            java { srcDirs = ['src/test/java', 'src/test/groovy'] }
            resources { srcDirs = ['src/test/resources'] }
        }
    }

    test {
        useJUnitPlatform()
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
}